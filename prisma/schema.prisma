datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

type ITag {
  name  String
  value String
}

enum IWinner {
  white
  black
  draw
}

type IGameMeta {
  wElo            Int?
  wProfileId      String?
  bElo            Int?
  bProfileId      String?
  winner          IWinner @default(draw)
  winnerProfileId String?
}

// TODO: Add opening relation into Game model 

model Game {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  event           String
  site            String
  round           Int?
  date            String
  white           String
  black           String
  result          String
  currentPosition String?
  eco             String?
  whiteElo        Int?
  blackElo        Int?
  timeControl     String?
  termination     String?
  moves           String[]
  otherTags       ITag[]
  profileId       String?
  gameMeta        IGameMeta
  opening         SimpleOpening?
}

type SimpleOpening {
  openingECO  String
  openingName String
}

model Opening {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  eco      String
  name     String
  sequence String[]
}

type IStats {
  topFirstMove          String?
  mostSuccessfulOpening String?
  mostPlayedTimeControl String?
  WLD                   Int[]
}

type IRatings {
  blitz  Int?
  bullet Int?
  daily  Int?
  rapid  Int?
}

type IUserNames {
  chessComConfirmed Boolean?
  chessCom          String?
    liChessConfirmed Boolean?
    liChess          String?
}

type A11yPrefs {
  theme      String
  typography String
  fontScale  String
}

model UserProfile {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @unique
  email     String      @unique
  games     String[]
  stats     IStats
  ratings   IRatings?
  userNames IUserNames?
  a11yPrefs A11yPrefs
}

// SCHEMA FOR PRISMA NextAuth ADAPTER

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}
